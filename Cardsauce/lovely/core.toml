[manifest]
version = "1.0.0"
dump_lua = true
priority = 9999999

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)"
position = "at"
payload = '''
local replace_card = G.FUNCS.title_screen_card(self, SC_scale)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.SPLASH_BACK:define_draw_steps({{
    shader = 'splash',
    send = {
        {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
        {name = 'vort_speed', val = 0.4},
        {name = 'colour_1', ref_table = G.SANDBOX, ref_value = 'col1'},
        {name = 'colour_2', ref_table = G.SANDBOX, ref_value = 'col2'},
        {name = 'mid_flash', ref_table = G.SANDBOX, ref_value = 'mid_flash'},
        {name = 'vort_offset', val = 0},
}}})'''
position = "at"
payload = '''
if csau_enabled['enableColors'] then
    G.SPLASH_BACK:define_draw_steps({{
        shader = 'splash',
        send = {
            {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
            {name = 'vort_speed', val = 1},
            {name = 'colour_1', ref_table = G.SANDBOX, ref_value = 'col1'},
            {name = 'colour_2', ref_table = G.SANDBOX, ref_value = 'col2'},
            {name = 'mid_flash', ref_table = G.SANDBOX, ref_value = 'mid_flash'},
            {name = 'vort_offset', val = (2*90.15315131*os.time())%100000},
        }
    }})
    G.SPLASH_BACK:define_draw_steps({{
        shader = 'splash',
        send = {
            {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
            {name = 'vort_speed', val = 1},
            {name = 'colour_1', ref_table = G.C, ref_value = 'COLOUR1'},
            {name = 'colour_2', ref_table = G.C, ref_value = 'WHITE'},
            {name = 'mid_flash', val = 0},
            {name = 'vort_offset', val = (2*90.15315131*os.time())%100000},
        }
    }})
else
    G.SPLASH_BACK:define_draw_steps({{
        shader = 'splash',
        send = {
            {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
            {name = 'vort_speed', val = 0.4},
            {name = 'colour_1', ref_table = G.SANDBOX, ref_value = 'col1'},
            {name = 'colour_2', ref_table = G.SANDBOX, ref_value = 'col2'},
            {name = 'mid_flash', ref_table = G.SANDBOX, ref_value = 'mid_flash'},
            {name = 'vort_offset', val = 0},
        }
    }})
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "at"
payload = '''
SC = nil
if G.FUNCS.center_splash_screen_card then
    SC = G.FUNCS.center_splash_screen_card(SC_scale)
else
    SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
                local card = Card(  card_pos.x + G.ROOM.T.w/2 - G.CARD_W*card_size/2,
                                    card_pos.y + G.ROOM.T.h/2 - G.CARD_H*card_size/2,
                                    card_size*G.CARD_W, card_size*G.CARD_H, pseudorandom_element(G.P_CARDS), G.P_CENTERS.c_base)
'''
position = "at"
payload = '''
local card = G.FUNCS.splash_screen_card(card_pos, card_size)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "G.FUNCS.DT_add_money = function() if G.STAGE == G.STAGES.RUN then ease_dollars(10) end end"
position = "at"
payload = '''
G.FUNCS.DT_add_money = function() if G.STAGE == G.STAGES.RUN then ease_dollars(10000) end end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_pool[#_pool + 1] = v.key"
position = "before"
payload = '''
if G.GAME.starting_params.csau_jokers_rate or G.GAME.starting_params.csau_all_rate then
    local csau_rate, csau_all_rate
    if G.GAME.starting_params.csau_jokers_rate then
        csau_rate = math.ceil(G.GAME.starting_params.csau_jokers_rate-1)
    end
    if G.GAME.starting_params.csau_all_rate then
        csau_all_rate = math.ceil(G.GAME.starting_params.csau_all_rate-1)
    end
    if G.GAME.starting_params.csau_jokers_rate and string.sub(v.key, 1, 6) == 'j_csau' then
        for i=1, csau_rate do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    elseif G.GAME.starting_params.csau_all_rate and containsString(v.key, '_csau_') then
        for i=1, csau_all_rate do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
if next(SMODS.find_card('j_csau_frich')) then
    if table.contains(G.P_CENTER_POOLS.Food, v) then
        _pool[#_pool + 1] = v.key
        _pool_size = _pool_size + 1
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
    tab_definition_function_args = 'Audio'
  }
'''
position = "after"
payload = '''
  if csau_enabled['enableColors'] then
      tabs[#tabs+1] = {
          label = localize('b_set_colors'),
          tab_definition_function = G.UIDEF.settings_tab,
          tab_definition_function_args = 'Colors'
      }
  end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "if self.text_input_hook then"
position = "before"
payload = '''
    if csau_enabled['enableEasterEggs'] then
        if key == mgt[mgt_num] then
            if key == "o" then
                G.debug_background_toggle = not G.debug_background_toggle
                mgt_num = 1
            else
                mgt_num = mgt_num + 1
            end
        else
            mgt_num = 1
        end
	end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.E_MANAGER:add_event(Event({ --Add bonus chips from this card
                    trigger = 'before',
                    delay = delay,
'''
position = "at"
payload = '''
G.E_MANAGER:add_event(Event({ --Add bonus chips from this card
                    trigger = extra ~= nil and extra.trigger or 'before',
                    delay = delay,
                    blocking = extra ~= nil and extra.blocking or nil,
                    blockable = extra ~= nil and extra.blockable or nil,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if specific_vars.nominal_chips then
    localize{type = 'other', key = 'card_chips', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
end
if specific_vars.bonus_chips then
    localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {SMODS.signed(specific_vars.bonus_chips)}}
end
'''
position = "at"
payload = '''
if card.csau_collab_credit then
    if card.csau_collab_credit.plural then
        localize{type = 'other', key = 'artists', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
    else
        localize{type = 'other', key = 'artist', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
    end
    localize{type = 'other', key = card.csau_collab_credit.key, nodes = desc_nodes, vars = card.csau_collab_credit.vars}
else
    if specific_vars.nominal_chips then
        localize{type = 'other', key = 'card_chips', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
    end
    if specific_vars.bonus_chips then
        localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {specific_vars.bonus_chips}}
    end
end
'''
match_indent = true

# CardArea:emplace()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''if location == 'front' or self.config.type == 'deck' then 
    table.insert(self.cards, 1, card)
else
    self.cards[#self.cards+1] = card
end'''
position = "at"
payload = '''
if index then
    table.insert(self.cards, index, card)
elseif location == 'front' or self.config.type == 'deck' then 
    table.insert(self.cards, 1, card)
else
    self.cards[#self.cards+1] = card
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_seal(_seal, silent, immediate)"
position = "at"
payload = "function Card:set_seal(_seal, silent, immediate, args)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self:juice_up(0.3, 0.3)
             play_sound(sound.sound, sound.per, sound.vol)'''
position = "after"
payload = '''if args and args.set_func and type(args.set_func) == 'function' then
    args.set_func()
end'''
match_indent = true
times = 2

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "_size = _size or 0.8"
position = "at"
payload = '''local _sizeX = (G.P_TAGS[self.key].width and G.P_TAGS[self.key].width/34 * (_size or 1) * 0.6) or _size or 0.8
    local _sizeY = (G.P_TAGS[self.key].height and G.P_TAGS[self.key].height/34 * (_size or 1) * 0.6) or _size or 0.8'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = 'local tag_sprite = Sprite(0,0,_size*1,_size*1,G.ASSET_ATLAS[(not self.hide_ability) and G.P_TAGS[self.key].atlas or "tags"], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)'
position = "at"
payload = 'local tag_sprite = Sprite(0,0,_sizeX*1,_sizeY*1,G.ASSET_ATLAS[(not self.hide_ability) and G.P_TAGS[self.key].atlas or "tags"], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)'
match_indent = true
times = 1

# Cryptid compatibility version of the above patch:
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = 'local tag_sprite = Sprite(0,0,_size*1,_size*1,tagatlas, (self.hide_ability) and G.tag_undiscovered.pos or self.pos)'
position = "at"
payload = 'local tag_sprite = Sprite(0,0,_sizeX*1,_sizeY*1,tagatlas, (self.hide_ability) and G.tag_undiscovered.pos or self.pos)'
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '{n=G.UIT.O, config={w=_size*1,h=_size*1, colour = G.C.BLUE, object = tag_sprite, focus_with_object = true}},'
position = "at"
payload = '{n=G.UIT.O, config={w=_sizeX*1,h=_sizeY*1, colour = G.C.BLUE, object = tag_sprite, focus_with_object = true}},'
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions.banned_cards then'''
position = "after"
payload = '''   if type(_ch.restrictions.banned_cards) == 'function' then
        _ch.restrictions.banned_cards = _ch.restrictions.banned_cards()
	end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions.banned_tags then'''
position = "after"
payload = '''
    if type(_ch.restrictions.banned_tags) == 'function' then
        _ch.restrictions.banned_tags = _ch.restrictions.banned_tags()
    end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if _ch.restrictions.banned_other then'''
position = "after"
payload = '''   
    if type(_ch.restrictions.banned_other) == 'function' then
        _ch.restrictions.banned_other = _ch.restrictions.banned_other()
    end'''
match_indent = true
times = 1
