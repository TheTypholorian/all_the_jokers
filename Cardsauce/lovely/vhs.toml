[manifest]
version = "1.0.0"
dump_lua = true
priority = 9999999

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
{n=G.UIT.B, config = {w=0.1,h=0.6}},
{n=G.UIT.T, config={text = localize('b_use'),colour = G.C.UI.TEXT_LIGHT, scale = 0.55, shadow = true}}
'''
position = "at"
payload = '''
{n=G.UIT.B, config = {w=card.ability.set == "VHS" and 0.2 or 0.1,h=0.6 }},
{n=G.UIT.T, config={text = card.ability.set == "VHS" and (card.ability.activated and localize('b_deactivate') or localize('b_activate')) or localize('b_use'),colour = G.C.UI.TEXT_LIGHT, scale = card.ability.set == "VHS" and 0.75 or 0.55, shadow = true}}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = poll_edition('wheel_of_fortune', nil, true, true)"
position = "at"
payload = '''
local nukie = G.FUNCS.find_activated_tape('c_csau_nukie')
if nukie and SMODS.pseudorandom_probability(nukie, 'csau_nukie_negative', 1, nukie.ability.extra.chance) then
    edition = {negative = true}
else
    edition = poll_edition('wheel_of_fortune', nil, true, true)
end
if edition == 'e_polychrome' and next(SMODS.find_card('j_csau_speen')) then
    check_for_unlock({ type = "high_speen" })
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.blind.name == 'The Serpent' and"
position = "before"
payload = '''
if G.GAME.blind.name ~= 'The Serpent' then
    local miami = G.FUNCS.find_activated_tape('c_csau_miami')
    if miami then
        miami:juice_up()
        hand_space = hand_space + miami.ability.extra.draw_mod
        miami.ability.extra.uses = miami.ability.extra.uses+1
        if to_big(miami.ability.extra.uses) >= to_big(miami.ability.extra.runtime) then
            G.FUNCS.destroy_tape(miami)
            miami.ability.destroyed = true
        end
    end
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''for i=1, hand_space do --draw cards from deckL
        if G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK then
            draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
        else
            draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
        end
    end
'''
position = "at"
payload = '''
SMODS.draw_cards_from_deck(hand_space)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "button_contents = {n=G.UIT.T, config={text = localize('b_use'),colour = G.C.WHITE, scale = 0.5}}"
position = "at"
payload = "button_contents = {n=G.UIT.T, config={text = args.card.ability.set == 'VHS' and localize('b_'..(args.card.ability.activated and 'de' or '')..'activate') or localize('b_use'),colour = G.C.WHITE, scale = 0.5}}"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})"
position = "at"
payload = '''
if G.FUNCS.find_activated_tape('c_csau_blooddebts') then
    add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5), card = G.FUNCS.find_activated_tape('c_csau_blooddebts')})
else
    add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local edition_poll = pseudorandom(pseudoseed(_key or 'edition_generic'))"
position = "at"
payload = "local edition_poll = pseudorandom(pseudoseed(_key or 'edition_generic'), nil, nil, true)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = "local edition_poll = pseudorandom(pseudoseed(_key or 'edition_generic')) -- Generate the poll value"
position = "at"
payload = "local edition_poll = pseudorandom(pseudoseed(_key or 'edition_generic'), nil, nil, true) -- Generate the poll value"
match_indent = true