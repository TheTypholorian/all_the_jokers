[manifest]
version = "1.0.0"
dump_lua = true
priority = 9999999

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "context.other_card:is_suit(self.ability.extra.suit) then"
position = 'at'
match_indent = true
payload = "context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or self.ability.extra.suit) then"

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.ability.name == 'Wrathful Joker' or self.ability.name == 'Gluttonous Joker' then loc_vars = {self.ability.extra.s_mult, localize(self.ability.extra.suit, 'suits_singular')}"
position = 'at'
match_indent = true
payload = "self.ability.name == 'Wrathful Joker' or self.ability.name == 'Gluttonous Joker' then loc_vars = {self.ability.extra.s_mult, localize(G.GAME and G.GAME.wigsaw_suit or self.ability.extra.suit, 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or self.ability.extra.suit]}}"

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Diamonds") then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Diamonds") then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Clubs") then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Clubs") then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Spades") then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Spades") then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Hearts") and'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Hearts") and'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Rough Gem' then loc_vars = {self.ability.extra}
elseif self.ability.name == 'Bloodstone' then 
    local a, b = SMODS.get_probability_vars(self, 1, self.ability.extra.odds, 'bloodstone')
    loc_vars = {a, b, self.ability.extra.Xmult}
elseif self.ability.name == 'Arrowhead' then loc_vars = {self.ability.extra}
elseif self.ability.name == 'Onyx Agate' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Rough Gem' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Diamonds', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Diamonds']}}
elseif self.ability.name == 'Bloodstone' then 
    local a, b = SMODS.get_probability_vars(self, 1, self.ability.extra.odds, 'bloodstone')
    loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra.odds, self.ability.extra.Xmult, localize(G.GAME and G.GAME.wigsaw_suit or 'Hearts', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Hearts']}}
elseif self.ability.name == 'Arrowhead' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades']}}
elseif self.ability.name == 'Onyx Agate' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''

# Cryptid compatibility version of the above patch:
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Rough Gem' then loc_vars = {self.ability.extra}
elseif self.ability.name == 'Bloodstone' then loc_vars = {cry_prob(self.ability.cry_prob, self.ability.extra.odds, self.ability.cry_rigged), self.ability.extra.odds, self.ability.extra.Xmult}
elseif self.ability.name == 'Arrowhead' then loc_vars = {self.ability.extra}
elseif self.ability.name == 'Onyx Agate' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Rough Gem' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Diamonds', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Diamonds']}}
elseif self.ability.name == 'Bloodstone' then
loc_vars = {cry_prob(self.ability.cry_prob, self.ability.extra.odds, self.ability.cry_rigged), self.ability.extra.odds, self.ability.extra.Xmult, localize(G.GAME and G.GAME.wigsaw_suit or 'Hearts', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Hearts']}}
elseif self.ability.name == 'Arrowhead' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades']}}
elseif self.ability.name == 'Onyx Agate' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit(G.GAME.current_round.ancient_card.suit) then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.ancient_card.suit) then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Ancient Joker' then loc_vars = {self.ability.extra, localize(G.GAME.current_round.ancient_card.suit, 'suits_singular'), colours = {G.C.SUITS[G.GAME.current_round.ancient_card.suit]}}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Ancient Joker' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.ancient_card.suit, 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.ancient_card.suit]}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if v:is_suit('Clubs', nil, true) or v:is_suit('Spades', nil, true) then'''
position = 'at'
match_indent = true
payload = '''if v:is_suit(G.GAME and G.GAME.wigsaw_suit or 'Clubs', nil, true) or v:is_suit(G.GAME and G.GAME.wigsaw_suit or 'Spades', nil, true) then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Blackboard' then loc_vars = {self.ability.extra, localize('Spades', 'suits_plural'), localize('Clubs', 'suits_plural')}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Blackboard' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_plural'), localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_plural'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit(G.GAME.current_round.castle_card.suit) and not context.blueprint then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.castle_card.suit) and not context.blueprint then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Castle' then loc_vars = {self.ability.extra.chip_mod, localize(G.GAME.current_round.castle_card.suit, 'suits_singular'), self.ability.extra.chips, colours = {G.C.SUITS[G.GAME.current_round.castle_card.suit]}}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Castle' then loc_vars = {self.ability.extra.chip_mod, localize(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.castle_card.suit, 'suits_singular'), self.ability.extra.chips, colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.castle_card.suit]}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if suits["Hearts"] > 0 and
suits["Diamonds"] > 0 and
suits["Spades"] > 0 and
suits["Clubs"] > 0 then
    return {
        message = localize{type='variable',key='a_xmult',vars={self.ability.extra}},
        Xmult_mod = self.ability.extra
    }
end'''
position = 'at'
match_indent = true
payload = '''if G.GAME and G.GAME.wigsaw_suit then
    if suits[G.GAME.wigsaw_suit] > 0 then
        return {
            message = localize{type='variable',key='a_xmult',vars={self.ability.extra}},
            Xmult_mod = self.ability.extra
        }
    end
else
    if suits["Hearts"] > 0 and
    suits["Diamonds"] > 0 and
    suits["Spades"] > 0 and
    suits["Clubs"] > 0 then
        return {
            message = localize{type='variable',key='a_xmult',vars={self.ability.extra}},
            Xmult_mod = self.ability.extra
        }
    end
end
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Flower Pot' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Flower Pot' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Diamonds', 'suits_singular'), localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), localize(G.GAME and G.GAME.wigsaw_suit or 'Hearts', 'suits_singular'), localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Diamonds'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Hearts'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades']}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if SMODS.seeing_double_check(context.scoring_hand, 'Clubs') then"
position = 'at'
match_indent = true
payload = "if SMODS.seeing_double_check(context.scoring_hand, G.GAME and G.GAME.wigsaw_suit or 'Clubs') then"

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Seeing Double' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Seeing Double' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _c.name == "The Star" then loc_vars = {cfg.max_highlighted,  localize(cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[cfg.suit_conv]}}
       elseif _c.name == "The Moon" then loc_vars = {cfg.max_highlighted, localize(cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[cfg.suit_conv]}}
       elseif _c.name == "The Sun" then loc_vars = {cfg.max_highlighted, localize(cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[cfg.suit_conv]}}'''
position = "at"
payload = '''elseif _c.name == "The Star" then loc_vars = {cfg.max_highlighted,  localize(G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv]}}
       elseif _c.name == "The Moon" then loc_vars = {cfg.max_highlighted, localize(G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv]}}
       elseif _c.name == "The Sun" then loc_vars = {cfg.max_highlighted, localize(G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv]}}
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _c.name == "The World" then loc_vars = {cfg.max_highlighted, localize(cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[cfg.suit_conv]}}'''
position = "at"
payload = '''elseif _c.name == "The World" then loc_vars = {cfg.max_highlighted, localize(G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv, 'suits_plural'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or cfg.suit_conv]}}'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function() G.hand.highlighted[i]:change_suit(self.ability.consumeable.suit_conv);return true end }))'''
position = "at"
payload = '''G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function() G.hand.highlighted[i]:change_suit(G.GAME and G.GAME.wigsaw_suit or self.ability.consumeable.suit_conv);return true end }))'''
match_indent = true
times = 1


