[manifest]
version = "1.0.0"
dump_lua = true
priority = -9

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
          elseif part.control.X then
            final_line[#final_line+1] = {n=G.UIT.C, config={align = "m", colour = loc_colour(part.control.X), r = 0.05, padding = 0.03, res = 0.15}, nodes={
                {n=G.UIT.T, config={
                  text = assembled_string,
                  colour = loc_colour(part.control.C or nil),
'''
position = "at"
payload = '''
          elseif part.control.X then
            final_line[#final_line+1] = {n=G.UIT.C, config={align = "m", colour = loc_colour(part.control.X), r = 0.05, padding = 0.03, res = 0.15}, nodes={
                {n=G.UIT.T, config={
                  text = assembled_string,
                  colour = part.control.V and args.vars.colours[tonumber(part.control.V)] or loc_colour(part.control.C or nil, args.default_col),
                  scale = 0.32*(part.control.s and tonumber(part.control.s) or 1)*desc_scale}},
            }}
          elseif part.control.B then
            final_line[#final_line+1] = {n=G.UIT.C, config={detailed_tooltip = part.control.T and (G.P_CENTERS[part.control.T] or G.P_TAGS[part.control.T]) or nil, align = "m", colour = part.control.B and args.vars.colours[tonumber(part.control.B)] or loc_colour(part.control.C or nil, args.default_col), r = 0.05, padding = 0.03, res = 0.15}, nodes={
                {n=G.UIT.T, config={
                  text = assembled_string,
                  colour = part.control.V and args.vars.colours[tonumber(part.control.V)] or loc_colour(part.control.C or nil, args.default_col),
'''
match_indent = false




